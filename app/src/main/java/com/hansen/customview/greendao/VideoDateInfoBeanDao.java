package com.hansen.customview.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hansen.customview.mpandroidchart.VideoDateInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_DATE_INFO_BEAN".
*/
public class VideoDateInfoBeanDao extends AbstractDao<VideoDateInfoBean, Long> {

    public static final String TABLENAME = "VIDEO_DATE_INFO_BEAN";

    /**
     * Properties of entity VideoDateInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DataAreaid = new Property(1, String.class, "dataAreaid", false, "DATA_AREAID");
        public final static Property DataAreaName = new Property(2, String.class, "dataAreaName", false, "DATA_AREA_NAME");
        public final static Property AreaData = new Property(3, String.class, "areaData", false, "AREA_DATA");
        public final static Property AreaDate = new Property(4, String.class, "areaDate", false, "AREA_DATE");
    }


    public VideoDateInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public VideoDateInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_DATE_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATA_AREAID\" TEXT," + // 1: dataAreaid
                "\"DATA_AREA_NAME\" TEXT," + // 2: dataAreaName
                "\"AREA_DATA\" TEXT," + // 3: areaData
                "\"AREA_DATE\" TEXT);"); // 4: areaDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_DATE_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoDateInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dataAreaid = entity.getDataAreaid();
        if (dataAreaid != null) {
            stmt.bindString(2, dataAreaid);
        }
 
        String dataAreaName = entity.getDataAreaName();
        if (dataAreaName != null) {
            stmt.bindString(3, dataAreaName);
        }
 
        String areaData = entity.getAreaData();
        if (areaData != null) {
            stmt.bindString(4, areaData);
        }
 
        String areaDate = entity.getAreaDate();
        if (areaDate != null) {
            stmt.bindString(5, areaDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoDateInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dataAreaid = entity.getDataAreaid();
        if (dataAreaid != null) {
            stmt.bindString(2, dataAreaid);
        }
 
        String dataAreaName = entity.getDataAreaName();
        if (dataAreaName != null) {
            stmt.bindString(3, dataAreaName);
        }
 
        String areaData = entity.getAreaData();
        if (areaData != null) {
            stmt.bindString(4, areaData);
        }
 
        String areaDate = entity.getAreaDate();
        if (areaDate != null) {
            stmt.bindString(5, areaDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VideoDateInfoBean readEntity(Cursor cursor, int offset) {
        VideoDateInfoBean entity = new VideoDateInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dataAreaid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dataAreaName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // areaData
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // areaDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoDateInfoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDataAreaid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDataAreaName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAreaData(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAreaDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VideoDateInfoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VideoDateInfoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoDateInfoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
